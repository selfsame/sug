/* Parses CSS rule values

 */

start
  = w s:stylevalue w {return s}


stylevalue = first:(url / transform / measure / color / value_symbol / string) rest:(w ','? w v:(url / measure / color / value_symbol / string) {return v})* {return [].concat(first).concat(rest)}


value_symbol = s:symbol w1:w {return {type:'symbol', value:s, string:s+w1, html:'<span class="symbol">'+s+'</span>'+w1}}


symbol = first:[a-zA-Z_] rest:[a-zA-Z0-9\-_]* {return first+rest.join('')}


url =
  "url(" w "\'" p:URI "\'" w ")" w1:w {return {type:'url', value:p, string:"url('"+p+"')"+w1, html:"url('"+p+"')"+w1}} /
  "url(" w "\"" p:URI "\"" w ")" w1:w {return {type:'url', value:p, string:"url('"+p+"')"+w1, html:"url('"+p+"')"+w1}} /
  "url(" w  p:URI  w ")" w1:w {return {type:'url', value:p, string:"url('"+p+"')"+w1, html:"url('"+p+"')"+w1}}

URI = r:[.+,~;\-_A-Za-z0-9:\/=\?&#\[\]@\!$\*]+ {return r.join('')}

string = "\'" w1:w p:(s:symbol w2:w {return s+w2})* "\'" w  {return {type:'string', value:w1+p.join('')}} /
  "\"" w1:w p:(s:symbol w2:w {return s+w2})* "\"" w  {return {type:'string', value:w1+p.join('')}}


transform =
  "rotate(" w m:measure w ")" w1:w {return {type:'transform', word:"rotate", value:m.value, unit:m.unit, string:"rotate("+m.string+")"+w1, html:"rotate("+m.html+")"+w1}}

color = ( "#" v:( (hexchar hexchar hexchar hexchar hexchar hexchar) / (hexchar hexchar hexchar)) w1:w
  {return {type:'color', format:'hex', string:'#'+v.join('')+w1, value: '#'+v.join(''), html:'<span class="color">'+'#'+v.join('')+w1+'</span>' };}
/
  "rgb(" r:number w ',' w b:number w ',' w g:number w ')' w2:w
  {return {type:'color', format:'rgb',
    string:"rgb("+r+','+b+','+g+')'+w2,
    value:{r:parseInt(r),b:parseInt(b),g:parseInt(g)}, html:'<span class="color">'+"rgb("+r+','+b+','+g+')'+'</span>'}}

/
  "rgba(" r:number w ',' w b:number w ',' w g:number w ',' w a:number w ')' w1:w
  {return {type:'color', format:'rgba',
    string:"rgba("+r+','+b+','+g+','+a+')'+w1,
    value:{r:parseInt(r),b:parseInt(b),g:parseInt(g), a:parseFloat(a)}, html:'<span class="color">'+"rgba("+r+','+b+','+g+','+a+')'+w1+'</span>'}}
)

hexchar = [0-9A-Fa-f]


measure =
    value:float w unit:('px'/'em'/'%'/'in'/'cm'/'mm'/'ex'/'pt'/'pc'/'deg') w1:w
    { return {type:'measure', value:parseFloat(value), unit:unit, string:value+unit+w1, html:'<span class="val">'+value+'</span>'+'<span class="unit">'+unit+'</span>'+w1}; } /
    value:integer w unit:('px'/'em'/'%'/'in'/'cm'/'mm'/'ex'/'pt'/'pc'/'deg') w1:w
    { return {type:'measure', value:parseInt(value), unit:unit, string:value+unit+w1, html:'<span class="val">'+value+'</span>'+'<span class="unit">'+unit+'</span>'+w1}; } /
    value:float w1:w {return {type:'measure', value:parseFloat(value), unit:'float', string:value+w1, html:'<span class="val">'+value+'</span>'+w1}} /
    value:integer w1:w {return {type:'measure', value:parseInt(value), unit:'int', string:value+w1, html:'<span class="val">'+value+'</span>'+w1}}

number
  = float
  / integer

float
  = sign:"-"?
    before:[0-9]* "." after:[0-9]+ {
      return sign+parseFloat(before.join("") + "." + after.join(""));
    }

integer
  = sign:"-"?
    digits:[0-9]+ {
      return sign+parseInt(digits.join(""), 10);
    }

reqw = string:(" " / tab)+ {return string.join('')}
w = string:(" " / tab / newline)* {return string.join('')}
newline = [\n] / "\r\n"  {return "\n" }
tab = [\t] {return "\t" }
