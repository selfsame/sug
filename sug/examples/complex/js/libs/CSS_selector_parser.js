window.CSS_selector_parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "selector": parse_selector,
        "selectortarget": parse_selectortarget,
        "tagname": parse_tagname,
        "idname": parse_idname,
        "classname": parse_classname,
        "pseudo": parse_pseudo,
        "symbol": parse_symbol,
        "w": parse_w,
        "newline": parse_newline,
        "tab": parse_tab
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_w();
        if (result0 !== null) {
          result1 = parse_selector();
          if (result1 !== null) {
            result2 = [];
            pos2 = pos;
            pos3 = pos;
            result3 = parse_w();
            if (result3 !== null) {
              if (input.charCodeAt(pos) === 44) {
                result4 = ",";
                pos++;
              } else {
                result4 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result4 !== null) {
                result5 = parse_w();
                if (result5 !== null) {
                  result6 = parse_selector();
                  if (result6 !== null) {
                    result3 = [result3, result4, result5, result6];
                  } else {
                    result3 = null;
                    pos = pos3;
                  }
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
            } else {
              result3 = null;
              pos = pos3;
            }
            if (result3 !== null) {
              result3 = (function(offset, s) {return s})(pos2, result3[3]);
            }
            if (result3 === null) {
              pos = pos2;
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = pos;
              pos3 = pos;
              result3 = parse_w();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 44) {
                  result4 = ",";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_w();
                  if (result5 !== null) {
                    result6 = parse_selector();
                    if (result6 !== null) {
                      result3 = [result3, result4, result5, result6];
                    } else {
                      result3 = null;
                      pos = pos3;
                    }
                  } else {
                    result3 = null;
                    pos = pos3;
                  }
                } else {
                  result3 = null;
                  pos = pos3;
                }
              } else {
                result3 = null;
                pos = pos3;
              }
              if (result3 !== null) {
                result3 = (function(offset, s) {return s})(pos2, result3[3]);
              }
              if (result3 === null) {
                pos = pos2;
              }
            }
            if (result2 !== null) {
              result3 = parse_w();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, rest) {return [].concat([first]).concat(rest)})(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_selector() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_selectortarget();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          result2 = parse_w();
          if (result2 !== null) {
            result3 = parse_selectortarget();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos3;
            }
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result2 = (function(offset, w1, target) {return [{type:'descendant', string:w1, html:w1, strength:0},target]})(pos2, result2[0], result2[1]);
          }
          if (result2 === null) {
            pos = pos2;
          }
          if (result2 === null) {
            pos2 = pos;
            pos3 = pos;
            result2 = parse_w();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 62) {
                result3 = ">";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_w();
                if (result4 !== null) {
                  result5 = parse_selectortarget();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(offset, w1, w2, target) {return [{type:'child', string:w1+'>'+w2, html:w1+'>'+w2, strength:0},target]})(pos2, result2[0], result2[2], result2[3]);
            }
            if (result2 === null) {
              pos = pos2;
            }
            if (result2 === null) {
              pos2 = pos;
              pos3 = pos;
              result2 = parse_w();
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 43) {
                  result3 = "+";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"+\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse_w();
                  if (result4 !== null) {
                    result5 = parse_selectortarget();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = pos3;
                    }
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result2 = (function(offset, w1, w2, target) {return [{type:'next', string:w1+'+'+w2, html:w1+'+'+w2, strength:0},target]})(pos2, result2[0], result2[2], result2[3]);
              }
              if (result2 === null) {
                pos = pos2;
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            result2 = parse_w();
            if (result2 !== null) {
              result3 = parse_selectortarget();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(offset, w1, target) {return [{type:'descendant', string:w1, html:w1, strength:0},target]})(pos2, result2[0], result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
            if (result2 === null) {
              pos2 = pos;
              pos3 = pos;
              result2 = parse_w();
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 62) {
                  result3 = ">";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse_w();
                  if (result4 !== null) {
                    result5 = parse_selectortarget();
                    if (result5 !== null) {
                      result2 = [result2, result3, result4, result5];
                    } else {
                      result2 = null;
                      pos = pos3;
                    }
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result2 = (function(offset, w1, w2, target) {return [{type:'child', string:w1+'>'+w2, html:w1+'>'+w2, strength:0},target]})(pos2, result2[0], result2[2], result2[3]);
              }
              if (result2 === null) {
                pos = pos2;
              }
              if (result2 === null) {
                pos2 = pos;
                pos3 = pos;
                result2 = parse_w();
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 43) {
                    result3 = "+";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse_w();
                    if (result4 !== null) {
                      result5 = parse_selectortarget();
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = pos3;
                      }
                    } else {
                      result2 = null;
                      pos = pos3;
                    }
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
                if (result2 !== null) {
                  result2 = (function(offset, w1, w2, target) {return [{type:'next', string:w1+'+'+w2, html:w1+'+'+w2, strength:0},target]})(pos2, result2[0], result2[2], result2[3]);
                }
                if (result2 === null) {
                  pos = pos2;
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, rest) { 
          result = [];
          string = '';
          strength = 0;
          html = '';
          result = result.concat(first);
          for (var i=0;i<rest.length;i++){
            result = result.concat(rest[i]);
          }
          for (var i=0;i<result.length;i++){
            string += result[i].string;
            strength += result[i].strength;
            html += result[i].html;
          }
          return {type:'selector', string:string, strength:strength, parts:result, html:html}
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_selectortarget() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_tagname();
        if (result0 === null) {
          result0 = parse_idname();
          if (result0 === null) {
            result0 = parse_classname();
            if (result0 === null) {
              result0 = parse_pseudo();
            }
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_idname();
          if (result2 === null) {
            result2 = parse_classname();
            if (result2 === null) {
              result2 = parse_pseudo();
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_idname();
            if (result2 === null) {
              result2 = parse_classname();
              if (result2 === null) {
                result2 = parse_pseudo();
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, rest) {
        
        result = {type:'target',tag:false, id:[], class:[], pseudo:[]};
        
        set = [first].concat(rest);
        string = '';
        html = '';
        strength = 0;
        for (var i=0;i<set.length;i++){
          if (set[i].tag) {
            result.tag = set[i].tag;
            strength += 1;
            html += '<span class="tag">'+set[i].string+'</span>';
          }
          if (set[i].id) {
            result.id.push( set[i].id);
            strength += 100;
            html += '<span class="id">'+set[i].string+'</span>';
          }
          if (set[i].class) {
            result.class.push( set[i].class);
            strength += 10;
            html += '<span class="classname">'+set[i].string+'</span>';
          }
          if (set[i].pseudo) {
            result.pseudo.push( set[i].pseudo);
            strength += 1;
            html += '<span class="pseudo">'+set[i].string+'</span>';
          }
          string += set[i].string;
        
        }
        result.string = string;
        result.strength = strength;
        result.html = html;
        return result;
        
        })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tagname() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_symbol();
        if (result0 !== null) {
          result0 = (function(offset, s) {return {'tag':s, string:s} })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_idname() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 35) {
          result0 = "#";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s) {return {'id':s, string:'#'+s}})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_classname() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 46) {
          result0 = ".";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s) {return  {'class':s, string:'.'+s}})(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_pseudo() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1, pos2, pos3, pos4, pos5, pos6;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 58) {
          result0 = ":";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            result2 = parse_w();
            if (result2 !== null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 40) {
                result3 = "(";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_w();
                if (result4 !== null) {
                  pos3 = pos;
                  pos4 = pos;
                  if (/^[0-9]/.test(input.charAt(pos))) {
                    result6 = input.charAt(pos);
                    pos++;
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      if (/^[0-9]/.test(input.charAt(pos))) {
                        result6 = input.charAt(pos);
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[0-9]");
                        }
                      }
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result6 = parse_w();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 110) {
                        result7 = "n";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"n\"");
                        }
                      }
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = parse_w();
                        if (result8 !== null) {
                          pos5 = pos;
                          pos6 = pos;
                          if (input.charCodeAt(pos) === 43) {
                            result9 = "+";
                            pos++;
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"+\"");
                            }
                          }
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result10 = parse_w();
                            if (result10 !== null) {
                              if (/^[0-9]/.test(input.charAt(pos))) {
                                result12 = input.charAt(pos);
                                pos++;
                              } else {
                                result12 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[0-9]");
                                }
                              }
                              if (result12 !== null) {
                                result11 = [];
                                while (result12 !== null) {
                                  result11.push(result12);
                                  if (/^[0-9]/.test(input.charAt(pos))) {
                                    result12 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    result12 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("[0-9]");
                                    }
                                  }
                                }
                              } else {
                                result11 = null;
                              }
                              if (result11 !== null) {
                                result12 = parse_w();
                                if (result12 !== null) {
                                  result9 = [result9, result10, result11, result12];
                                } else {
                                  result9 = null;
                                  pos = pos6;
                                }
                              } else {
                                result9 = null;
                                pos = pos6;
                              }
                            } else {
                              result9 = null;
                              pos = pos6;
                            }
                          } else {
                            result9 = null;
                            pos = pos6;
                          }
                          if (result9 !== null) {
                            result9 = (function(offset, sign, n) {return sign + n.join('')})(pos5, result9[0], result9[2]);
                          }
                          if (result9 === null) {
                            pos = pos5;
                          }
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result5 = [result5, result6, result7, result8, result9];
                          } else {
                            result5 = null;
                            pos = pos4;
                          }
                        } else {
                          result5 = null;
                          pos = pos4;
                        }
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                  } else {
                    result5 = null;
                    pos = pos4;
                  }
                  if (result5 !== null) {
                    result5 = (function(offset, n, mod, offset) {return n.join('') + mod + offset})(pos3, result5[0], result5[2], result5[4]);
                  }
                  if (result5 === null) {
                    pos = pos3;
                  }
                  if (result5 === null) {
                    pos3 = pos;
                    pos4 = pos;
                    result5 = parse_w();
                    if (result5 !== null) {
                      if (input.substr(pos, 4) === "even") {
                        result6 = "even";
                        pos += 4;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"even\"");
                        }
                      }
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                    } else {
                      result5 = null;
                      pos = pos4;
                    }
                    if (result5 !== null) {
                      result5 = (function(offset) {return "even"})(pos3);
                    }
                    if (result5 === null) {
                      pos = pos3;
                    }
                    if (result5 === null) {
                      pos3 = pos;
                      pos4 = pos;
                      result5 = parse_w();
                      if (result5 !== null) {
                        if (input.substr(pos, 3) === "odd") {
                          result6 = "odd";
                          pos += 3;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"odd\"");
                          }
                        }
                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = pos4;
                        }
                      } else {
                        result5 = null;
                        pos = pos4;
                      }
                      if (result5 !== null) {
                        result5 = (function(offset) {return "odd"})(pos3);
                      }
                      if (result5 === null) {
                        pos = pos3;
                      }
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_w();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 41) {
                        result7 = ")";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result7 !== null) {
                        result3 = [result3, result4, result5, result6, result7];
                      } else {
                        result3 = null;
                        pos = pos2;
                      }
                    } else {
                      result3 = null;
                      pos = pos2;
                    }
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                result4 = parse_w();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s, call, w1) {return  {'pseudo':':'+s+call.join(''), string:':'+s+call.join('')+w1}})(pos0, result0[1], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 58) {
            result0 = ":";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_symbol();
            if (result1 !== null) {
              result2 = parse_w();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, s, w1) {return  {'pseudo':':'+s, string:':'+s+w1}})(pos0, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_symbol() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[a-zA-Z_]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[a-zA-Z0-9\-_]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z0-9\\-_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[a-zA-Z0-9\-_]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9\\-_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, rest) {return first+rest.join('')})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_w() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (input.charCodeAt(pos) === 32) {
          result1 = " ";
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result1 === null) {
          result1 = parse_tab();
          if (result1 === null) {
            result1 = parse_newline();
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.charCodeAt(pos) === 32) {
            result1 = " ";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          if (result1 === null) {
            result1 = parse_tab();
            if (result1 === null) {
              result1 = parse_newline();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, string) {return string.join('')})(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_newline() {
        var result0;
        var pos0;
        
        if (/^[\n]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 2) === "\r\n") {
            result0 = "\r\n";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) {return "\n" })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_tab() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[\t]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "\t" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();