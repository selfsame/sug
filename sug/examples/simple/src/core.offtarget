(ns examples.simple.core
  (:require
      [om.core :as om :include-macros true]
      [om.dom :as dom :include-macros true]
      [sug.core :as sug :include-macros true]
      [cljs.core.async :as async :refer [>! <! put! chan dropping-buffer]]))

(enable-console-print!)

;; defcomp takes a map that expands into the reified om functions
;; :init-state :will-mount :did-mount :will-update :did-update :will-unmount :render :render-state

(sug/defcomp button
  [cursor this]
  {:render-state
  (fn [_ state]
      (dom/button #js
        {:onClick (fn [e]
            (sug/fire! this :activate {:some 'stuff'}))} "toggle"))})

(sug/defcomp label
  [cursor this]

 {:init-state
  (fn [_] {:active false})

  :render-state
  (fn [_ state]
      (dom/label nil
          (dom/span nil (str (:active state)))

          ;make and make-all are just wrappers to om/build om/build-all,
          ;which sneaks our async chans to descendants

          (sug/make button cursor {})))

  ;; named event handlers.  These create core.async chans, which are
  ;; chained down the component heirarchy.

  :on {:activate
       (fn [e cursor owner]
        (om/set-state! owner :active (not (om/get-state owner :active)) ))}})


;; (defn ^:private graft
;;   [value cursor]
;;   (let [state  (-state cursor)
;;         path   (-path cursor)]
;;     (if (cursor? value)
;;       (throw (js/Error. (str value " is already a cursor.")))
;;       (specify value
;;         IGraft
;;         ITransact
;;         (-transact! [_ _ _ _]
;;           (throw (js/Error. "Cannot transact on graft")))
;;         ICursor
;;         (-state [_] state)
;;         (-path [_] path)))))

(defn- lazy-nl-via-item
  ([nl] (lazy-nl-via-item nl 0))
  ([nl n] (when (< n (. nl -length))
            (lazy-seq
             (cons (. nl (item n))
                   (lazy-nl-via-item nl (inc n)))))))

(defn- lazy-nl-via-array-ref
  ([nl] (lazy-nl-via-array-ref nl 0))
  ([nl n] (when (< n (. nl -length))
            (lazy-seq
             (cons (aget nl n)
                   (lazy-nl-via-array-ref nl (inc n)))))))

(defn- lazy-nodelist
  "A lazy seq view of a js/NodeList, or other array-like javascript things"
  [nl]
  (if (. nl -item)
    (lazy-nl-via-item nl)
    (lazy-nl-via-array-ref nl)))

(extend-type js/NodeList
    ICounted
    (-count [nodelist] (. nodelist -length))

    IIndexed
    (-nth ([nodelist n] (. nodelist (item n)))
          ([nodelist n not-found] (if (<= (. nodelist -length) n)
                                    not-found
                                    (nth nodelist n))))
    ISeqable
    (-seq [nodelist] (lazy-nodelist nodelist)))

(extend-type js/HTMLCollection
    ICounted
    (-count [coll] (. coll -length))

    IIndexed
    (-nth
     ([coll n] (. coll (item n)))
     ([coll n not-found] (if (<= (. coll -length) n)
                           not-found
                           (nth coll n))))

    ISeqable
    (-seq [coll] (lazy-nodelist coll)))

(extend-type js/Element
  IAssociative
  (-contains-key? [el k]
                  (let [sk (cond (keyword? k) (apply str (rest (str k)))
                   :else (str k))]
    (.hasOwnProperty el sk)))

  (-assoc [el k v]
    (let [sk (cond (keyword? k) (apply str (rest (str k)))
                   :else (str k))]
    (aset el sk v)))
  ILookup
  (-lookup [el k]
     (-lookup el k nil))
  (-lookup [el k not-found]
     (let [sk (cond (keyword? k) (apply str (rest (str k))) :else (str k))
           result (aget el sk)
           state (om/-state el)
           path (om/-path el)]
       (if-not (undefined? result)
        (cond (map? result)
              (om/MapCursor. result state (conj path k))
              (seqable? result)
              (om/IndexedCursor. result state (conj path k))
              :else result)
        not-found)))
  om/IToCursor
  (-to-cursor [value state]
;;               (aset value "state" #js {:om_prev_state (atom state)
;;                                        :__om_state (atom state)
;;                                        :__om_pending_state (atom state)})
;;               (aset value "path" [])
              (om/MapCursor. value state []))
  (-to-cursor [value state path]
;;               (aset value "state" #js {:om_prev_state (atom state)
;;                                        :__om_state (atom state)
;;                                        :__om_pending_state (atom state)})
;;               (aset value "path" path)
              (om/MapCursor. value state path))
;;   om/IValue
;;   (-value [cursor] cursor)
;;   om/ICursorDerive
;;   (-derive [cursor derived state path]
;;      (om/to-cursor derived state path))

;;   ISwap
;;   (-swap! [this cursor korks f tag] cursor)
;;   om/IOmSwap
;;   (-om-swap! [this cursor korks f tag] cursor)

;;   IDeref
;;     (-deref [this] this)
;;   om/IGetState
;;   (-get-state [this] (aget (.-state this) "__om_pending_state" ))
;;   om/IGetRenderState
;;   (-get-render-state [this] (aget (.-state this) "__om_state" ))
;;   om/ISetState
;;   (-set-state! [this value]
;;                (let [pending (aget (.-state this) "__om_pending_state")]
;;                  (swap! pending #(identity value))))
;;   (-set-state! [this path value]
;;                (let [pending (aget (.-state this) "__om_pending_state")]
;;                  (swap! pending update-in path #(identity value))))
  om/ICursor
  (-path [cursor] (aget cursor "path"))
  (-state [cursor] (aget cursor "state")  )
  )

(om/cursor? (.getElementById js/document "data"))



(sug/defcomp element
  [data owner]
  {:render-state
  (fn [_ state]
      (dom/p nil (prn-str data)))})


(defn children [data owner]
  (reify
    om/IRenderState
    (render-state [_ state]
      (apply dom/blockquote nil
        (om/build-all jelement data {})))))

(defn jelement [data owner]
  (reify
    om/IRenderState
    (render-state [_ state]
      (dom/div nil
        (dom/p nil (str (:localName data)
                        (when-not (= "" (:id data))
                          (str " #" (:id data) " "))
                         (prn-str (om/-path data ))) )
             (om/build children (:children data) {})
               ))))

(om/root jelement (.getElementById js/document "data")  {:target (.getElementById js/document "main")})



;; (def c (om/to-cursor (.getElementById js/document "data") {:t 0}))
;; (om/-path c)
;; (.log js/console  [c])




;; (assoc c :cat [{:fur true}{:eyes true}])

;; (contains? c "nodeName")
;; (-contains-key? c :cat)
;; (select-keys c [:nodeName :id :style])
;; (= (type (:children c)) (type js/HTMLCollection))
;; (type js/HTMLCollection)
;; (seqable? {:a 5})
;; (om/-path (:children c))

;; (om/-set-state! c [:t] 5)

;; (om/-value c)

;; (om/-path  (:children c))
